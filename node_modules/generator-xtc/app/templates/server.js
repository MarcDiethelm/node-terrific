
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Load some dependencies

var path       = require('path');
var http       = require('http');
var cfg;
var xtc;

try {
	xtc        = require('xtc');
}

// for xtc testing w/o project
catch (e) { xtc = require(path.join(process.cwd(), 'server.js')) }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Create an xtc Express instance

app = xtc();


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set some 'globals' we need later

//cfg = app.cfg.get();
cfg = app.cfg

// Add global template data
app.locals({ xtcVersion: cfg.xtcVersion });

// todo:
//app.set('xtcRoutes', true);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Register server middleware (`app.use`)
// (see http://expressjs.com/api.html#middleware and http://www.senchalabs.org/connect/)


app.xtc.registerProjectMiddlewares(function(express) {

	app.use(express.favicon(path.join(cfg.get('staticPath'), 'favicon.ico')));

	if ('development' === app.get('env')) {
		app.use(express.errorHandler());
		app.use(express.responseTime());
		app.use(express.logger({ immediate: true, format: 'dev' })); // dev style logging
	}

	if ('production' === app.get('env')) {
		app.use(express.logger('default')); // full production logging
	}

	app.use(express.json());
	app.use(express.urlencoded());
	app.use(express.multipart()); // Security tip: disable this if you don't need file upload.s
	app.use(express.methodOverride());
	app.use(express.compress());
});


if (cfg.allowAuthBypassForIpRanges) {
	// Populate the request IP with X-FORWARDED-FOR header if a proxy added one, or else the IP will be wrong.
	// Needed for authBasic helper to allow bypassing authentication for configurable IPs.
	// NOTE: This header is easily forged!
	app.enable('trust proxy');
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Listen to requests

/*
	We don't create a server if we have a parent script (e.g. testing).
	The function createServer and listen are defined in xtc's server.js and wrap Node's functions of the same name.
 */

if (!module.parent) {
	// Get a Node.js httpServer object
	var server = app.xtc.createServer(app, 'http', {});

	server.listen(cfg.get('devPort'));
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

module.exports = app;
