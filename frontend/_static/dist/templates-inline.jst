this["JST"] = this["JST"] || {};

this["JST"]["home"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  options = {hash:{
    'tag': ("nav")
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "nav-main", options) : helperMissing.call(depth0, "mod", "nav-main", options)))
    + "\n\n";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "bootstrap-carousel", options) : helperMissing.call(depth0, "mod", "bootstrap-carousel", options)))
    + "\n\n";
  return buffer;
  });

this["JST"]["test-modules"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<h2>Test: module includes</h2>\n\n"
    + "{{mod \"foo\"}}<br>\n";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "foo", options) : helperMissing.call(depth0, "mod", "foo", options)))
    + "\n<br>\n<br>\n"
    + "{{mod \"foo\" template=\"alternate\"}}<br>\n";
  options = {hash:{
    'template': ("alternate")
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "foo", options) : helperMissing.call(depth0, "mod", "foo", options)))
    + "\n<br>\n<br>\n"
    + "{{mod \"foo\" tag=\"aside\" skins=\"sheep, alternate\" connectors=\"stats, filter\"}}<br>\n";
  options = {hash:{
    'tag': ("aside"),
    'skins': ("sheep, alternate"),
    'connectors': ("stats, filter")
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "foo", options) : helperMissing.call(depth0, "mod", "foo", options)))
    + "\n<br>\n<br>\n"
    + "{{mod \"foo\" template=\"alternate\" skins=\"alternate, baz\" htmlClasses=\"test-class\" connectors=\"stats, filter\" indent=2}}<br>\n";
  options = {hash:{
    'template': ("alternate"),
    'skins': ("alternate, baz"),
    'htmlClasses': ("test-class"),
    'connectors': ("stats, filter"),
    'indent': (2)
  },data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "foo", options) : helperMissing.call(depth0, "mod", "foo", options)))
    + "\n<br>\n<br>\n"
    + "{{mod \"bar\"}} includes module foo...<br>\n";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "bar", options) : helperMissing.call(depth0, "mod", "bar", options)))
    + "\n<br>\n<br>\n"
    + "{{mod \"nothing\"}} doesn't exist!<br>\n";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "nothing", options) : helperMissing.call(depth0, "mod", "nothing", options)));
  return buffer;
  });

this["JST"]["bar"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "Module bar<br>\n";
  if (stack1 = helpers.data) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.data; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n\n";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.mod),stack1 ? stack1.call(depth0, "foo", options) : helperMissing.call(depth0, "mod", "foo", options)));
  return buffer;
  });

this["JST"]["bootstrap-carousel"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  


  return "<span class=\"wf-label\">.mod-bootstrap-carousel</span>\n<div id=\"myCarousel\" class=\"carousel slide\">\n	<ol class=\"carousel-indicators\">\n		<li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n		<li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n		<li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n	</ol>\n	<!-- Carousel items -->\n	<div class=\"carousel-inner\">\n		<div class=\"active item\"><img src=\"http://placehold.it/320x180&text=Slide 1\"></div>\n		<div class=\"item\"><img src=\"http://placehold.it/320x180&text=Slide 2\"></div>\n		<div class=\"item\"><img src=\"http://placehold.it/320x180&text=Slide 3\"></div>\n	</div>\n	<!-- Carousel nav -->\n	<a class=\"carousel-control left\" href=\"#myCarousel\" data-slide=\"prev\">&lsaquo;</a>\n	<a class=\"carousel-control right\" href=\"#myCarousel\" data-slide=\"next\">&rsaquo;</a>\n</div>\n<p>\n	This module's dependencies (js and css) are stored in the base folder. This means they are concatenated [and loaded\n	as external assets] and are always available in this base template.\n</p>";
  });

this["JST"]["foo-alternate"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  


  return "Module foo | Template alternate";
  });

this["JST"]["foo"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "Module foo<br>\n";
  if (stack1 = helpers.data) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.data; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1);
  return buffer;
  });

this["JST"]["nav-main"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [2,'>= 1.0.0-rc.3'];
helpers = helpers || Handlebars.helpers; data = data || {};
  


  return "<span class=\"wf-label\">.mod-nav-main</span>\n<ul>\n	<li><a href=\"/\">Home</a></li>\n	<li><a href=\"/subpage\">Sub-Page</a></li>\n</ul>";
  });